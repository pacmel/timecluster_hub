#############################
# JUPYTER VOLUME DOCKERFILE #
#***************************#
# Set up a jupyter-lab for  #
# developing using deepvats #
#############################
##############
# Base image #
##############
##--- Setup Ubuntu
ARG CUDA_VERSION
FROM nvidia/cuda:${CUDA_VERSION}

#--- Tags
LABEL maintainer="vrodriguezf <victor.rfernandez@upm.es>"
LABEL cuda_version=${CUDA_VERSION}

RUN echo "Cuda version: $CUDA_VERSION"
##---Initialize bash
SHELL [ "/bin/bash", "--login", "-c" ]

##################
# Packages setup #
################## 
#TODO: Automatizar que lo coja de /etc/timezone
#Only neccesary for libarchive & libtiff if error appears
ARG TZ=Etc/UTC 

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone \
    && apt-get update --fix-missing \
    #if errors with libtiff library
    #&& apt-get install -y wget bzip2 curl git sudo libarchive-dev libtiff5-dev \
    && apt-get install -y wget bzip2 curl git sudo libarchive-dev \
    #Otherwise
 #   && apt-get install -y wget bzip2 curl git sudo \
    && apt-get clean  \
    && rm -rf /var/lib/apt/lists/*

#-- Environmental variables for wandb
ENV LC_ALL=C.UTF-8 \
    LANG=C.UTF-8 

########################
# Create non-root user #
########################
ARG username=user\
    uid=1000 \
    gid=1000
ENV USER=$username \
    UID=$uid \
    GID=$gid 
ENV HOME=/home/$USER

#-- Passwordless sudo (TODO: mv to root section)
RUN addgroup --gid $GID $USER  \
    && adduser --disabled-password \
    --gecos "Non-root user" \
    --uid $UID \
    --gid $GID \
    --home $HOME $USER\
    && echo "$USER ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
#-- Move to user
USER $USER

# Add the jupyterlab settings
COPY --chown=$uid:$gid docker/jupyter_config $HOME/.jupyter
#####################
# Install miniconda #
#####################

ENV MINICONDA_VERSION=4.10.3 \ 
#ENV MINICONDA_VERSION=23.9.0 \ 
    CONDA_DIR=$HOME/miniconda3 \
    # Make non-activate conda commands available
    PATH=$CONDA_DIR/bin:$PATH \
    PROJECT_DIR=$HOME 

RUN echo "HOME: ${HOME} | CONDA_DIR = ${CONDA_DIR}" \
    #-- Install MINICONDA
    && wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-py38_$MINICONDA_VERSION-Linux-x86_64.sh -O ~/miniconda.sh  \
    && chmod +x ~/miniconda.sh  \
    && ~/miniconda.sh -b -p $CONDA_DIR  \
    && rm ~/miniconda.sh 

    # Make conda activate command available from /bin/bash --login shells
RUN echo ". $CONDA_DIR/etc/profile.d/conda.sh" >> ~/.profile 
    # make conda activate command available from /bin/bash --interative shells
RUN  conda init bash \
    # create a project directory inside user home
    && mkdir -p $PROJECT_DIR

WORKDIR $PROJECT_DIR
##########################
# Install & update MAMBA #
########################## 
ENV ENV_PREFIX $PROJECT_DIR/env
RUN conda install --name base --channel conda-forge mamba \
    #sudo apt-get update -y
    && mamba update --name base --channel defaults conda 
#-- Build the mamba environment
COPY --chown=$UID:$GID docker/environment.yml docker/requirements.txt /tmp/
#RUN mamba env create --prefix $ENV_PREFIX --file /tmp/environment.yml --force  \ 



######################
# FORCE FIX VERSIONS #
######################
# Instalar conda-lock

# ...
#RUN conda install -c conda-forge conda-lock && \
#    bash -c "source activate base && conda-lock -f /tmp/environment.yml -p linux-64 && conda-lock install -f /app/conda-linux-64-lock.yml"
# ...

#RUN conda install -c conda-forge conda-lock
# Generar el archivo de bloqueo y crear el entorno Conda
#RUN conda-lock -f /tmp/environment.yml -p linux-64 && \
 #   conda-lock install -f /app/conda-linux-64-lock.yml
#############################################################

#ARG LOCKS_PATH
#RUN mkdir -p ${LOCKS_PATH}


RUN conda install -c conda-forge conda-lock
ARG ORIG=docker \
    DEST=/tmp \
    LOCK_YML=environment-lock.yml \
    ENV_YML=environment.yml
COPY $ORIG/$LOCK_YML $DEST/$LOCK_YML
COPY $ORIG/$ENV_YML $DEST/$ENV_YML

#To generate first LOCK_FILE if doesnt exists use environment.yml and command
#conda lock -f ${DEST}/${ENV_YML} -p linux-64 > ${DEST}/${LOCK_FILE};  \
#RUN mamba env create --prefix ${ENV_PREFIX}  --file ${DEST}${LOCK_FILE};

#RUN mamba env create -p ${ENV_PREFIX} --file $DEST/${LOCK_YML}
RUN conda-lock install -p ${ENV_PREFIX} --file $DEST/${LOCK_YML}
RUN head -n10 $DEST/${LOCK_YML} && sleep 10
RUN conda list --prefix ${ENV_PREFIX} \
    && sleep 10

RUN conda clean --all --yes

# run the postBuild script to install the JupyterLab extensions
COPY --chown=$UID:$GID docker/postBuild /usr/local/bin
RUN chmod u+x /usr/local/bin/postBuild \
    && conda activate $ENV_PREFIX  \
    && /usr/local/bin/postBuild  \
    && conda deactivate \
    # Make bash automatically activate the conda environment
    && echo "conda activate $ENV_PREFIX" >> ~/.bashrc

###########################
# Editable packages (pip) #
########################### 
#RUN mkdir /home/$USER/lib \
    #&& conda activate $ENV_PREFIX \
    #&& cd /home/$USER/lib \
    ##Install tsai (v0.3.5)
    #&& rm -rf tsai \
    #&& git clone -b 0.3.5 --single-branch https://github.com/timeseriesAI/tsai.git \
    #&& cd tsai \ 
    #&& pip install --no-deps -e . \
    #&& conda deactivate

RUN conda list --prefix ${ENV_PREFIX}

COPY --chown=$UID:$GID docker/entrypoint.sh /usr/local/bin
RUN chmod u+x /usr/local/bin/entrypoint.sh


ENTRYPOINT [ "/usr/local/bin/entrypoint.sh" ]

# default command will be to launch JupyterLab server for development
CMD [ "jupyter", "lab", "--no-browser", "--ip", "0.0.0.0", "--ContentsManager.allow_hidden=True"]
