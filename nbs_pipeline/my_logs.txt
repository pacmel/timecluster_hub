--> LR_find
n_epoch: 3
cb: LRFinder
--> Fit
--> Create opt
---> opt_func 
self.model: ORELM_torch(
  (inputAE): FOSELM_torch()
  (hiddenAE): FOSELM_torch()
)
self.splitter(self.model): []
Learning rate: 0.001
OPT func: <function Adam at 0x7fc1e6bf1870>
Adam optimizer
Get cbs
decouple_wd: True
weight_decay <function weight_decay at 0x7fc1e6bf1240>
l2_reg <function l2_reg at 0x7fc1e6bf12d0>
Cbs: [<function weight_decay at 0x7fc1e6bf1240>]
Add to cbs
average_sqr_grad<function average_sqr_grad at 0x7fc1e6bf13f0>
step_stat<function step_stat at 0x7fc1e6bf16c0>
adam_step<function adam_step at 0x7fc1e6bf17e0>
partial(average_grad, dampening=True): functools.partial(<function average_grad at 0x7fc1e6bf1360>, dampening=True)
About to get optimizer
Get params
Get cbs
Get defaults
Get param list from params: []
Get hyperes
Set hypers
Set frozen idx
Return optimizer
-- opt_func -> 
Estoy aqui
--> bn_bias_state
--> norm bias params
Getting res
--> norm bias params
Getting res
Okay got res
About to return
--> norm bias params
Getting res
Okay got res
About to return
Okay got res
About to return
mapping var [tensor([[ 0.5783, -0.4044, -0.1709, -0.2519, -0.5634,  0.0595, -0.9879,  0.5828,
          0.6302, -0.5210, -0.2725,  0.8460,  0.6241, -0.9494,  0.1526, -0.4126,
         -0.1614, -0.2959,  0.7370, -0.6812, -0.8490, -0.5226,  0.2248, -0.5844,
         -0.4360]], grad_fn=<SubBackward0>), tensor([[-0.4452, -0.3971, -0.0318, -0.2942, -0.0749, -0.8163,  0.1696,  0.8776,
          0.1658,  0.6987, -0.2017,  0.7112,  0.2797, -0.6783, -0.3638, -0.7385,
         -0.7649, -0.0123,  0.5792,  0.1666,  0.2398,  0.3119, -0.8898,  0.2400,
         -0.2234]], grad_fn=<SubBackward0>), tensor([[-0.6373,  0.7048, -0.6767, -0.2852, -0.4880, -0.7011, -0.1358,  0.7576,
          0.3280,  0.1573,  0.4714, -0.2853,  0.6477, -0.1333, -0.9517, -0.9426,
          0.1059, -0.1176, -0.8546, -0.4109,  0.9336, -0.6533,  0.4906, -0.4100,
         -0.1342]], grad_fn=<SubBackward0>)]
Returning
Got norm bias state
--> bn_bias_state
--> norm bias params
Getting res
--> norm bias params
Getting res
Okay got res
About to return
--> norm bias params
Getting res
Okay got res
About to return
Okay got res
About to return
mapping var []
Returning
Create opt -->
About to fit
Event: fit
Function: <bound method Learner._do_fit of <fastai.learner.Learner object at 0x7fc0ee22cf40>>
--> _do_fit
epoch 0:
Event: epoch
Function: <bound method Learner._do_epoch of <fastai.learner.Learner object at 0x7fc0ee22cf40>>
--> Do epoch
Event: train
Function: <bound method Learner.all_batches of <fastai.learner.Learner object at 0x7fc0ee22cf40>>
Set the model to training mode
... Enabling Vs Code execution ...
--> Al batches
Event: batch
Function: <bound method Learner._do_one_batch of <fastai.learner.Learner object at 0x7fc0ee22cf40>>
--> Do one batch
--> Forward
features ~ (num_samples, num_Inputs, num_steps - nwindows) = torch.Size([64, 1, 25])
--> Input AE
--> Foselm: Train
targets shape torch.Size([64, 1, 25])
FOSELM:TRAIN:3SHAPED
FOSELM Features& targets shape
torch.Size([64, 1, 25])
torch.Size([64, 1, 25])
1 1
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
FOSELM:Train:END -->
Input AE -->
--> Hidden AE
--> Foselm: Train
targets shape torch.Size([1, 25])
FOSELM:TRAIN:2SHAPED
Dimensions ok
Features ~ torch.Size([1, 25])
Targets ~ torch.Size([1, 25])
Inputs ~ 25
1 1
--> Train func (single)
Foselm - Calculate Hidden layer activation
Features: torch.Size([1, 25])
weights: torch.Size([25, 25])
Foselm - Layer normalizatison
--> SigmoidActFunc V ~ torch.Size([1, 25])
SigmoidActFunc -->
FOSELM: Calculate hidden layer activation -->
non RLS
Train func (single) -->
FOSELM:Train:END -->
Hidden AE -->
Before LR 3: torch.Size([64, 1, 25])
Create layer
Setup bias
Apply LR layer
Create normalization layer
Normalize lr output
Get hidden layer activation
ORELM: calculate hidden layer activation 3-->
Forward --> result ~ torch.Size([64, 1, 25])
Do1b after pred
Loss_func MSELoss()
Loss function mse_loss
input -> input | Target -> target
Has torch function variadic
Check sizes
Check size_average
Broadcast tensors
Before broadcast: 
input ~ torch.Size([64, 1, 25])
target ~ torch.Size([64, 1, 25])
About to apply mse_loss
input: expanded input ~ torch.Size([64, 1, 25])
target: expanded target ~ torch.Size([64, 1, 25])
self.loss_Grad.backward: tensor(1.3831, grad_fn=<MseLossBackward0>)
Loss clone
Do1b after loss
Before backward
Event: backward
Function: <bound method Learner._backward of <fastai.learner.Learner object at 0x7fc0ee22cf40>>
--> _Backward 
loss_grad: tensor(1.3831, grad_fn=<MseLossBackward0>)
loss_grad: <class 'torch.Tensor'>
Backward: <bound method Tensor.backward of tensor(1.3831, grad_fn=<MseLossBackward0>)> | 
Self: <fastai.learner.Learner object at 0x7fc0ee22cf40>
Backward.requires_grad True
--> Backward 
backward: Tensors: tensor(1.3831, grad_fn=<MseLossBackward0>)
Grad variables: None
Checking line Var <class 'torch.autograd.variable.Variable'> type <class 'torch.autograd.variable.VariableMeta'>
_Backward -->
Before Step
Event: step
Function: <bound method Learner._step of <fastai.learner.Learner object at 0x7fc0ee22cf40>>
Do one batch -->
Traceback (most recent call last):
  File "/tmp/ipykernel_1176004/1119649501.py", line 16, in <module>
    lr_valley, lr_steep = learn.lr_find(suggest_funcs=[valley, steep])
  File "/home/macu/env/lib/python3.10/site-packages/fastai/callback/schedule.py", line 309, in lr_find
    with self.no_logging(): self.fit(n_epoch, cbs=cb)
  File "/home/macu/env/lib/python3.10/site-packages/fastai/learner.py", line 316, in fit
    self._with_events(self._do_fit, 'fit', CancelFitException, self._end_cleanup)
  File "/home/macu/env/lib/python3.10/site-packages/fastai/learner.py", line 214, in _with_events
    try: self(f'before_{event_type}');  f()
  File "/home/macu/env/lib/python3.10/site-packages/fastai/learner.py", line 302, in _do_fit
    self._with_events(self._do_epoch, 'epoch', CancelEpochException)
  File "/home/macu/env/lib/python3.10/site-packages/fastai/learner.py", line 214, in _with_events
    try: self(f'before_{event_type}');  f()
  File "/home/macu/env/lib/python3.10/site-packages/fastai/learner.py", line 289, in _do_epoch
    self._do_epoch_train()
  File "/home/macu/env/lib/python3.10/site-packages/fastai/learner.py", line 280, in _do_epoch_train
    self._with_events(self.all_batches, 'train', CancelTrainException)
  File "/home/macu/env/lib/python3.10/site-packages/fastai/learner.py", line 214, in _with_events
    try: self(f'before_{event_type}');  f()
  File "/home/macu/env/lib/python3.10/site-packages/fastai/learner.py", line 221, in all_batches
    for o in enumerate(self.dl): self.one_batch(*o)
  File "/home/macu/lib/tsai/tsai/learner.py", line 40, in one_batch
    self._with_events(self._do_one_batch, 'batch', CancelBatchException)
  File "/home/macu/env/lib/python3.10/site-packages/fastai/learner.py", line 216, in _with_events
    self(f'after_{event_type}');  final()
  File "/home/macu/env/lib/python3.10/site-packages/fastai/learner.py", line 172, in __call__
    def __call__(self, event_name): L(event_name).map(self._call_one)
  File "/home/macu/env/lib/python3.10/site-packages/fastcore/foundation.py", line 156, in map
    def map(self, f, *args, **kwargs): return self._new(map_ex(self, f, *args, gen=False, **kwargs))
  File "/home/macu/env/lib/python3.10/site-packages/fastcore/basics.py", line 840, in map_ex
    return list(res)
  File "/home/macu/env/lib/python3.10/site-packages/fastcore/basics.py", line 825, in __call__
    return self.func(*fargs, **kwargs)
  File "/home/macu/env/lib/python3.10/site-packages/fastai/learner.py", line 176, in _call_one
    for cb in self.cbs.sorted('order'): cb(event_name)
  File "/home/macu/env/lib/python3.10/site-packages/fastai/callback/core.py", line 62, in __call__
    except Exception as e: raise modify_exception(e, f'Exception occured in `{self.__class__.__name__}` when calling event `{event_name}`:\n\t{e.args[0]}', replace=True)
  File "/home/macu/env/lib/python3.10/site-packages/fastai/callback/core.py", line 60, in __call__
    try: res = getcallable(self, event_name)()
  File "/home/macu/env/lib/python3.10/site-packages/fastai/learner.py", line 617, in after_batch
    self.lrs.append(self.opt.hypers[-1]['lr'])
  File "/home/macu/env/lib/python3.10/site-packages/fastcore/foundation.py", line 112, in __getitem__
    def __getitem__(self, idx): return self._get(idx) if is_indexer(idx) else L(self._get(idx), use_list=None)
  File "/home/macu/env/lib/python3.10/site-packages/fastcore/foundation.py", line 116, in _get
    if is_indexer(i) or isinstance(i,slice): return getattr(self.items,'iloc',self.items)[i]
IndexError: Exception occured in `Recorder` when calling event `after_batch`:
	list index out of range

