# Autogenerated by nbdev

d = { 'settings': { 'branch': 'master',
                'doc_baseurl': '/dvats/',
                'doc_host': 'https://vrodriguezf.github.io',
                'git_url': 'https://github.com/vrodriguezf/deepvats',
                'lib_path': 'dvats'},
  'syms': { 'dvats.all': {},
            'dvats.config': { 'dvats.config.build_enc_artifact': ('config.html#build_enc_artifact', 'dvats/config.py'),
                              'dvats.config.check_project_and_entity': ('config.html#check_project_and_entity', 'dvats/config.py'),
                              'dvats.config.custom_error': ('config.html#custom_error', 'dvats/config.py'),
                              'dvats.config.diff_attrdict': ('config.html#diff_attrdict', 'dvats/config.py'),
                              'dvats.config.force_artifact_config_dcae': ('config.html#force_artifact_config_dcae', 'dvats/config.py'),
                              'dvats.config.force_artifact_config_mvp': ('config.html#force_artifact_config_mvp', 'dvats/config.py'),
                              'dvats.config.force_artifact_config_sd2a': ('config.html#force_artifact_config_sd2a', 'dvats/config.py'),
                              'dvats.config.frequency_factor_config': ('config.html#frequency_factor_config', 'dvats/config.py'),
                              'dvats.config.get_artifact_config_DCAE': ('config.html#get_artifact_config_dcae', 'dvats/config.py'),
                              'dvats.config.get_artifact_config_MVP': ('config.html#get_artifact_config_mvp', 'dvats/config.py'),
                              'dvats.config.get_artifact_config_MVP_SWV': ('config.html#get_artifact_config_mvp_swv', 'dvats/config.py'),
                              'dvats.config.get_artifact_config_MVP_auxiliar_variables': ( 'config.html#get_artifact_config_mvp_auxiliar_variables',
                                                                                           'dvats/config.py'),
                              'dvats.config.get_artifact_config_MVP_auxiliar_variables_SWV': ( 'config.html#get_artifact_config_mvp_auxiliar_variables_swv',
                                                                                               'dvats/config.py'),
                              'dvats.config.get_artifact_config_MVP_check_errors': ( 'config.html#get_artifact_config_mvp_check_errors',
                                                                                     'dvats/config.py'),
                              'dvats.config.get_artifact_config_dimensionality_reduction': ( 'config.html#get_artifact_config_dimensionality_reduction',
                                                                                             'dvats/config.py'),
                              'dvats.config.get_artifact_config_embeddings': ( 'config.html#get_artifact_config_embeddings',
                                                                               'dvats/config.py'),
                              'dvats.config.get_artifact_config_embeddings_SWV': ( 'config.html#get_artifact_config_embeddings_swv',
                                                                                   'dvats/config.py'),
                              'dvats.config.get_artifact_config_sd2a': ('config.html#get_artifact_config_sd2a', 'dvats/config.py'),
                              'dvats.config.get_artifact_config_sd2a_check_errors': ( 'config.html#get_artifact_config_sd2a_check_errors',
                                                                                      'dvats/config.py'),
                              'dvats.config.get_artifact_config_sd2a_get_auxiliar_variables': ( 'config.html#get_artifact_config_sd2a_get_auxiliar_variables',
                                                                                                'dvats/config.py'),
                              'dvats.config.get_artifact_config_xai_lrp': ('config.html#get_artifact_config_xai_lrp', 'dvats/config.py'),
                              'dvats.config.get_config': ('config.html#get_config', 'dvats/config.py'),
                              'dvats.config.get_project_data': ('config.html#get_project_data', 'dvats/config.py'),
                              'dvats.config.get_resampling_frequency': ('config.html#get_resampling_frequency', 'dvats/config.py'),
                              'dvats.config.get_tested_config': ('config.html#get_tested_config', 'dvats/config.py'),
                              'dvats.config.get_train_artifact': ('config.html#get_train_artifact', 'dvats/config.py'),
                              'dvats.config.join_constructor': ('config.html#join_constructor', 'dvats/config.py'),
                              'dvats.config.print_colored': ('config.html#print_colored', 'dvats/config.py'),
                              'dvats.config.recursive_attrdict': ('config.html#recursive_attrdict', 'dvats/config.py'),
                              'dvats.config.replace_includes_with_content': ( 'config.html#replace_includes_with_content',
                                                                              'dvats/config.py'),
                              'dvats.config.show_attrdict': ('config.html#show_attrdict', 'dvats/config.py'),
                              'dvats.config.show_available_configs': ('config.html#show_available_configs', 'dvats/config.py'),
                              'dvats.config.show_config': ('config.html#show_config', 'dvats/config.py'),
                              'dvats.config.split_artifact_string': ('config.html#split_artifact_string', 'dvats/config.py')},
            'dvats.dr': { 'dvats.dr.check_compatibility': ('dr.html#check_compatibility', 'dvats/dr.py'),
                          'dvats.dr.cluster_score': ('dr.html#cluster_score', 'dvats/dr.py'),
                          'dvats.dr.get_PCA_UMAP_prjs': ('dr.html#get_pca_umap_prjs', 'dvats/dr.py'),
                          'dvats.dr.get_PCA_prjs': ('dr.html#get_pca_prjs', 'dvats/dr.py'),
                          'dvats.dr.get_TSNE_prjs': ('dr.html#get_tsne_prjs', 'dvats/dr.py'),
                          'dvats.dr.get_UMAP_prjs': ('dr.html#get_umap_prjs', 'dvats/dr.py'),
                          'dvats.dr.plot_projections': ('dr.html#plot_projections', 'dvats/dr.py'),
                          'dvats.dr.plot_projections_clusters': ('dr.html#plot_projections_clusters', 'dvats/dr.py')},
            'dvats.encoder': { 'dvats.encoder.CustomWandbCallback': ('encoder.html#customwandbcallback', 'dvats/encoder.py'),
                               'dvats.encoder.CustomWandbCallback.__init__': ('encoder.html#__init__', 'dvats/encoder.py'),
                               'dvats.encoder.CustomWandbCallback.before_fit': ('encoder.html#before_fit', 'dvats/encoder.py'),
                               'dvats.encoder.DCAE_torch': ('encoder.html#dcae_torch', 'dvats/encoder.py'),
                               'dvats.encoder.DCAE_torch.__init__': ('encoder.html#__init__', 'dvats/encoder.py'),
                               'dvats.encoder.DCAE_torch.forward': ('encoder.html#forward', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder': ('encoder.html#encoder', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder.__post_init__': ('encoder.html#__post_init__', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder.config_optim': ('encoder.html#config_optim', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder.configure_optimizer_moirai': ( 'encoder.html#configure_optimizer_moirai',
                                                                                     'dvats/encoder.py'),
                               'dvats.encoder.Encoder.fine_tune_': ('encoder.html#fine_tune_', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder.fine_tune_moirai_': ('encoder.html#fine_tune_moirai_', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder.fine_tune_moirai_eval_': ('encoder.html#fine_tune_moirai_eval_', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder.fine_tune_moirai_eval_step_': ( 'encoder.html#fine_tune_moirai_eval_step_',
                                                                                      'dvats/encoder.py'),
                               'dvats.encoder.Encoder.fine_tune_moirai_single_': ( 'encoder.html#fine_tune_moirai_single_',
                                                                                   'dvats/encoder.py'),
                               'dvats.encoder.Encoder.fine_tune_moirai_train_': ( 'encoder.html#fine_tune_moirai_train_',
                                                                                  'dvats/encoder.py'),
                               'dvats.encoder.Encoder.fine_tune_moirai_train_loop_step_': ( 'encoder.html#fine_tune_moirai_train_loop_step_',
                                                                                            'dvats/encoder.py'),
                               'dvats.encoder.Encoder.fine_tune_moment_': ('encoder.html#fine_tune_moment_', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder.fine_tune_moment_eval_': ('encoder.html#fine_tune_moment_eval_', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder.fine_tune_moment_eval_preprocess': ( 'encoder.html#fine_tune_moment_eval_preprocess',
                                                                                           'dvats/encoder.py'),
                               'dvats.encoder.Encoder.fine_tune_moment_eval_step_': ( 'encoder.html#fine_tune_moment_eval_step_',
                                                                                      'dvats/encoder.py'),
                               'dvats.encoder.Encoder.fine_tune_moment_single_': ( 'encoder.html#fine_tune_moment_single_',
                                                                                   'dvats/encoder.py'),
                               'dvats.encoder.Encoder.fine_tune_moment_train_': ( 'encoder.html#fine_tune_moment_train_',
                                                                                  'dvats/encoder.py'),
                               'dvats.encoder.Encoder.fine_tune_moment_train_loop_step_': ( 'encoder.html#fine_tune_moment_train_loop_step_',
                                                                                            'dvats/encoder.py'),
                               'dvats.encoder.Encoder.fine_tune_mvp_': ('encoder.html#fine_tune_mvp_', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder.fine_tune_mvp_single_': ('encoder.html#fine_tune_mvp_single_', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder.fine_tune_single_': ('encoder.html#fine_tune_single_', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder.get_dist_moirai_': ('encoder.html#get_dist_moirai_', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder.get_enc_embs_moirai_': ('encoder.html#get_enc_embs_moirai_', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder.get_model_class': ('encoder.html#get_model_class', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder.get_splits_': ('encoder.html#get_splits_', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder.metrics': ('encoder.html#metrics', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder.metrics_args': ('encoder.html#metrics_args', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder.metrics_names': ('encoder.html#metrics_names', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder.print': ('encoder.html#print', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder.set_fine_tune_': ('encoder.html#set_fine_tune_', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder.set_model_': ('encoder.html#set_model_', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder.setup_scheduler': ('encoder.html#setup_scheduler', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder.show_eval_stats': ('encoder.html#show_eval_stats', 'dvats/encoder.py'),
                               'dvats.encoder.Encoder.sure_eval_moment': ('encoder.html#sure_eval_moment', 'dvats/encoder.py'),
                               'dvats.encoder.EncoderInput': ('encoder.html#encoderinput', 'dvats/encoder.py'),
                               'dvats.encoder.EncoderInput.__post_init__': ('encoder.html#__post_init__', 'dvats/encoder.py'),
                               'dvats.encoder.EncoderInput.data': ('encoder.html#data', 'dvats/encoder.py'),
                               'dvats.encoder.EncoderInput.shape': ('encoder.html#shape', 'dvats/encoder.py'),
                               'dvats.encoder.EncoderInput.shapes': ('encoder.html#shapes', 'dvats/encoder.py'),
                               'dvats.encoder.EncoderInput.size': ('encoder.html#size', 'dvats/encoder.py'),
                               'dvats.encoder.EncoderOptimizer': ('encoder.html#encoderoptimizer', 'dvats/encoder.py'),
                               'dvats.encoder.EncoderOptimizer._post__init__': ('encoder.html#_post__init__', 'dvats/encoder.py'),
                               'dvats.encoder.LRScheduler': ('encoder.html#lrscheduler', 'dvats/encoder.py'),
                               'dvats.encoder.LRScheduler.__post_init__': ('encoder.html#__post_init__', 'dvats/encoder.py'),
                               'dvats.encoder.LRScheduler._check_flag': ('encoder.html#_check_flag', 'dvats/encoder.py'),
                               'dvats.encoder.LRScheduler._check_lr': ('encoder.html#_check_lr', 'dvats/encoder.py'),
                               'dvats.encoder.LRScheduler._check_name': ('encoder.html#_check_name', 'dvats/encoder.py'),
                               'dvats.encoder.LRScheduler._check_steps': ('encoder.html#_check_steps', 'dvats/encoder.py'),
                               'dvats.encoder.RMSELoss': ('encoder.html#rmseloss', 'dvats/encoder.py'),
                               'dvats.encoder.RMSELoss.__init__': ('encoder.html#__init__', 'dvats/encoder.py'),
                               'dvats.encoder.RMSELoss.forward': ('encoder.html#forward', 'dvats/encoder.py'),
                               'dvats.encoder.RMSELossFlat': ('encoder.html#rmselossflat', 'dvats/encoder.py'),
                               'dvats.encoder.SMAPELoss': ('encoder.html#smapeloss', 'dvats/encoder.py'),
                               'dvats.encoder.SMAPELoss.__init__': ('encoder.html#__init__', 'dvats/encoder.py'),
                               'dvats.encoder.SMAPELoss.forward': ('encoder.html#forward', 'dvats/encoder.py'),
                               'dvats.encoder.SMAPELoss.smape_loss': ('encoder.html#smape_loss', 'dvats/encoder.py'),
                               'dvats.encoder.SMAPELossFlat': ('encoder.html#smapelossflat', 'dvats/encoder.py'),
                               'dvats.encoder._get_enc_input': ('encoder.html#_get_enc_input', 'dvats/encoder.py'),
                               'dvats.encoder._get_encoder': ('encoder.html#_get_encoder', 'dvats/encoder.py'),
                               'dvats.encoder._get_optimizer': ('encoder.html#_get_optimizer', 'dvats/encoder.py'),
                               'dvats.encoder.config_optim': ('encoder.html#config_optim', 'dvats/encoder.py'),
                               'dvats.encoder.configure_optimizer_moirai': ('encoder.html#configure_optimizer_moirai', 'dvats/encoder.py'),
                               'dvats.encoder.fine_tune': ('encoder.html#fine_tune', 'dvats/encoder.py'),
                               'dvats.encoder.fine_tune_moirai_': ('encoder.html#fine_tune_moirai_', 'dvats/encoder.py'),
                               'dvats.encoder.fine_tune_moirai_eval_': ('encoder.html#fine_tune_moirai_eval_', 'dvats/encoder.py'),
                               'dvats.encoder.fine_tune_moirai_eval_step_': ( 'encoder.html#fine_tune_moirai_eval_step_',
                                                                              'dvats/encoder.py'),
                               'dvats.encoder.fine_tune_moirai_single_': ('encoder.html#fine_tune_moirai_single_', 'dvats/encoder.py'),
                               'dvats.encoder.fine_tune_moirai_train_': ('encoder.html#fine_tune_moirai_train_', 'dvats/encoder.py'),
                               'dvats.encoder.fine_tune_moirai_train_loop_step_': ( 'encoder.html#fine_tune_moirai_train_loop_step_',
                                                                                    'dvats/encoder.py'),
                               'dvats.encoder.fine_tune_moment_': ('encoder.html#fine_tune_moment_', 'dvats/encoder.py'),
                               'dvats.encoder.fine_tune_moment_compute_loss': ( 'encoder.html#fine_tune_moment_compute_loss',
                                                                                'dvats/encoder.py'),
                               'dvats.encoder.fine_tune_moment_compute_loss_check_sizes_': ( 'encoder.html#fine_tune_moment_compute_loss_check_sizes_',
                                                                                             'dvats/encoder.py'),
                               'dvats.encoder.fine_tune_moment_eval_': ('encoder.html#fine_tune_moment_eval_', 'dvats/encoder.py'),
                               'dvats.encoder.fine_tune_moment_eval_preprocess': ( 'encoder.html#fine_tune_moment_eval_preprocess',
                                                                                   'dvats/encoder.py'),
                               'dvats.encoder.fine_tune_moment_eval_step_': ( 'encoder.html#fine_tune_moment_eval_step_',
                                                                              'dvats/encoder.py'),
                               'dvats.encoder.fine_tune_moment_single_': ('encoder.html#fine_tune_moment_single_', 'dvats/encoder.py'),
                               'dvats.encoder.fine_tune_moment_train_': ('encoder.html#fine_tune_moment_train_', 'dvats/encoder.py'),
                               'dvats.encoder.fine_tune_moment_train_loop_step_': ( 'encoder.html#fine_tune_moment_train_loop_step_',
                                                                                    'dvats/encoder.py'),
                               'dvats.encoder.fine_tune_mvp_': ('encoder.html#fine_tune_mvp_', 'dvats/encoder.py'),
                               'dvats.encoder.fine_tune_mvp_single_': ('encoder.html#fine_tune_mvp_single_', 'dvats/encoder.py'),
                               'dvats.encoder.fit_fastai': ('encoder.html#fit_fastai', 'dvats/encoder.py'),
                               'dvats.encoder.get_acts': ('encoder.html#get_acts', 'dvats/encoder.py'),
                               'dvats.encoder.get_acts_moment': ('encoder.html#get_acts_moment', 'dvats/encoder.py'),
                               'dvats.encoder.get_dist_moirai': ('encoder.html#get_dist_moirai', 'dvats/encoder.py'),
                               'dvats.encoder.get_dist_moirai_': ('encoder.html#get_dist_moirai_', 'dvats/encoder.py'),
                               'dvats.encoder.get_enc_embs': ('encoder.html#get_enc_embs', 'dvats/encoder.py'),
                               'dvats.encoder.get_enc_embs_MVP': ('encoder.html#get_enc_embs_mvp', 'dvats/encoder.py'),
                               'dvats.encoder.get_enc_embs_MVP_set_stride_set_batch_size': ( 'encoder.html#get_enc_embs_mvp_set_stride_set_batch_size',
                                                                                             'dvats/encoder.py'),
                               'dvats.encoder.get_enc_embs_ensure_batch_size_': ( 'encoder.html#get_enc_embs_ensure_batch_size_',
                                                                                  'dvats/encoder.py'),
                               'dvats.encoder.get_enc_embs_moirai': ('encoder.html#get_enc_embs_moirai', 'dvats/encoder.py'),
                               'dvats.encoder.get_enc_embs_moirai_': ('encoder.html#get_enc_embs_moirai_', 'dvats/encoder.py'),
                               'dvats.encoder.get_enc_embs_moment': ('encoder.html#get_enc_embs_moment', 'dvats/encoder.py'),
                               'dvats.encoder.get_enc_embs_moment_reconstruction': ( 'encoder.html#get_enc_embs_moment_reconstruction',
                                                                                     'dvats/encoder.py'),
                               'dvats.encoder.get_enc_embs_set_stride_set_batch_size': ( 'encoder.html#get_enc_embs_set_stride_set_batch_size',
                                                                                         'dvats/encoder.py'),
                               'dvats.encoder.get_forecast_model_moirai': ('encoder.html#get_forecast_model_moirai', 'dvats/encoder.py'),
                               'dvats.encoder.get_metrics_dict': ('encoder.html#get_metrics_dict', 'dvats/encoder.py'),
                               'dvats.encoder.get_past_target_moirai': ('encoder.html#get_past_target_moirai', 'dvats/encoder.py'),
                               'dvats.encoder.kwargs_to_cpu_': ('encoder.html#kwargs_to_cpu_', 'dvats/encoder.py'),
                               'dvats.encoder.kwargs_to_gpu_': ('encoder.html#kwargs_to_gpu_', 'dvats/encoder.py'),
                               'dvats.encoder.mae_flat': ('encoder.html#mae_flat', 'dvats/encoder.py'),
                               'dvats.encoder.moment_build_masks': ('encoder.html#moment_build_masks', 'dvats/encoder.py'),
                               'dvats.encoder.mse_loss_flat': ('encoder.html#mse_loss_flat', 'dvats/encoder.py'),
                               'dvats.encoder.plot_eval_stats': ('encoder.html#plot_eval_stats', 'dvats/encoder.py'),
                               'dvats.encoder.prepare_train_and_eval_dataloaders': ( 'encoder.html#prepare_train_and_eval_dataloaders',
                                                                                     'dvats/encoder.py'),
                               'dvats.encoder.random_windows': ('encoder.html#random_windows', 'dvats/encoder.py'),
                               'dvats.encoder.rmse': ('encoder.html#rmse', 'dvats/encoder.py'),
                               'dvats.encoder.rmse_flat': ('encoder.html#rmse_flat', 'dvats/encoder.py'),
                               'dvats.encoder.set_fine_tune_': ('encoder.html#set_fine_tune_', 'dvats/encoder.py'),
                               'dvats.encoder.set_fine_tune_single_': ('encoder.html#set_fine_tune_single_', 'dvats/encoder.py'),
                               'dvats.encoder.setup_scheduler': ('encoder.html#setup_scheduler', 'dvats/encoder.py'),
                               'dvats.encoder.show_eval_stats': ('encoder.html#show_eval_stats', 'dvats/encoder.py'),
                               'dvats.encoder.smape': ('encoder.html#smape', 'dvats/encoder.py'),
                               'dvats.encoder.smape_flat': ('encoder.html#smape_flat', 'dvats/encoder.py'),
                               'dvats.encoder.sure_eval_moment': ('encoder.html#sure_eval_moment', 'dvats/encoder.py'),
                               'dvats.encoder.sure_eval_moment_old': ('encoder.html#sure_eval_moment_old', 'dvats/encoder.py'),
                               'dvats.encoder.validate_with_metrics': ('encoder.html#validate_with_metrics', 'dvats/encoder.py'),
                               'dvats.encoder.validate_with_metrics_': ('encoder.html#validate_with_metrics_', 'dvats/encoder.py'),
                               'dvats.encoder.validate_with_metrics_format_results': ( 'encoder.html#validate_with_metrics_format_results',
                                                                                       'dvats/encoder.py'),
                               'dvats.encoder.windowed_dataset': ('encoder.html#windowed_dataset', 'dvats/encoder.py')},
            'dvats.imports': {},
            'dvats.load': { 'dvats.load.TSArtifact': ('load.html#tsartifact', 'dvats/load.py'),
                            'dvats.load.TSArtifact.__init__': ('load.html#__init__', 'dvats/load.py'),
                            'dvats.load.TSArtifact.from_daily_csv_files': ('load.html#from_daily_csv_files', 'dvats/load.py'),
                            'dvats.load.TSArtifact.from_df': ('load.html#from_df', 'dvats/load.py'),
                            'dvats.load.download_file_from_google_drive': ('load.html#download_file_from_google_drive', 'dvats/load.py'),
                            'dvats.load.get_confirm_token': ('load.html#get_confirm_token', 'dvats/load.py'),
                            'dvats.load.infer_or_inject_freq': ('load.html#infer_or_inject_freq', 'dvats/load.py'),
                            'dvats.load.mat2csv': ('load.html#mat2csv', 'dvats/load.py'),
                            'dvats.load.save_response_content': ('load.html#save_response_content', 'dvats/load.py'),
                            'dvats.load.unzip_mat': ('load.html#unzip_mat', 'dvats/load.py'),
                            'dvats.load.wandb.apis.public.Artifact.to_df': ('load.html#wandb.apis.public.artifact.to_df', 'dvats/load.py'),
                            'dvats.load.wandb.apis.public.Artifact.to_tsartifact': ( 'load.html#wandb.apis.public.artifact.to_tsartifact',
                                                                                     'dvats/load.py'),
                            'dvats.load.zip_contents': ('load.html#zip_contents', 'dvats/load.py')},
            'dvats.memory': { 'dvats.memory.color_for_percentage': ('memory.html#color_for_percentage', 'dvats/memory.py'),
                              'dvats.memory.cpu_memory_status': ('memory.html#cpu_memory_status', 'dvats/memory.py'),
                              'dvats.memory.create_bar': ('memory.html#create_bar', 'dvats/memory.py'),
                              'dvats.memory.get_cpu_memory': ('memory.html#get_cpu_memory', 'dvats/memory.py'),
                              'dvats.memory.get_decoded_memory': ('memory.html#get_decoded_memory', 'dvats/memory.py'),
                              'dvats.memory.get_gpu_memory': ('memory.html#get_gpu_memory', 'dvats/memory.py'),
                              'dvats.memory.gpu_memory_status': ('memory.html#gpu_memory_status', 'dvats/memory.py'),
                              'dvats.memory.memMB2GB': ('memory.html#memmb2gb', 'dvats/memory.py'),
                              'dvats.memory.memb2GB': ('memory.html#memb2gb', 'dvats/memory.py')},
            'dvats.mmplots': { 'dvats.mmplots.mSTAMP': ('mstamp.html#mstamp', 'dvats/mmplots.py'),
                               'dvats.mmplots.mSTAMP.compute': ('mstamp.html#compute', 'dvats/mmplots.py'),
                               'dvats.mmplots.mSTAMP.mass': ('mstamp.html#mass', 'dvats/mmplots.py'),
                               'dvats.mmplots.mSTAMP.mass_pre': ('mstamp.html#mass_pre', 'dvats/mmplots.py'),
                               'dvats.mmplots.mstomp': ('mstamp.html#mstomp', 'dvats/mmplots.py'),
                               'dvats.mmplots.stomp_mass': ('mstamp.html#stomp_mass', 'dvats/mmplots.py'),
                               'dvats.mmplots.stomp_mass_pre': ('mstamp.html#stomp_mass_pre', 'dvats/mmplots.py')},
            'dvats.mplots': { 'dvats.mplots.DistanceMatrix': ('mplots.html#distancematrix', 'dvats/mplots.py'),
                              'dvats.mplots.DistanceMatrix.compute': ('mplots.html#compute', 'dvats/mplots.py'),
                              'dvats.mplots.DistanceMatrix.load_data_from_matlab': ('mplots.html#load_data_from_matlab', 'dvats/mplots.py'),
                              'dvats.mplots.DistanceMatrix.provide_lens': ('mplots.html#provide_lens', 'dvats/mplots.py'),
                              'dvats.mplots.DistanceProfile': ('mplots.html#distanceprofile', 'dvats/mplots.py'),
                              'dvats.mplots.DistanceProfile.compute': ('mplots.html#compute', 'dvats/mplots.py'),
                              'dvats.mplots.DistanceProfile.plot_subsequence_compared': ( 'mplots.html#plot_subsequence_compared',
                                                                                          'dvats/mplots.py'),
                              'dvats.mplots.DistanceProfile.provide_lens': ('mplots.html#provide_lens', 'dvats/mplots.py'),
                              'dvats.mplots.GD_Mat': ('mplots.html#gd_mat', 'dvats/mplots.py'),
                              'dvats.mplots.GD_Mat.__init__': ('mplots.html#__init__', 'dvats/mplots.py'),
                              'dvats.mplots.GD_Mat.__str__': ('mplots.html#__str__', 'dvats/mplots.py'),
                              'dvats.mplots.GD_Mat.download_file_from_google_drive': ( 'mplots.html#download_file_from_google_drive',
                                                                                       'dvats/mplots.py'),
                              'dvats.mplots.GD_Mat.get_mat_files': ('mplots.html#get_mat_files', 'dvats/mplots.py'),
                              'dvats.mplots.GD_Mat.mat2csv': ('mplots.html#mat2csv', 'dvats/mplots.py'),
                              'dvats.mplots.GD_Mat.unzip_mat': ('mplots.html#unzip_mat', 'dvats/mplots.py'),
                              'dvats.mplots.MatlabMatrix': ('mplots.html#matlabmatrix', 'dvats/mplots.py'),
                              'dvats.mplots.MatlabMatrix.load': ('mplots.html#load', 'dvats/mplots.py'),
                              'dvats.mplots.MatlabMatrix.smooth': ('mplots.html#smooth', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfile': ('mplots.html#matrixprofile', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfile.__str__': ('mplots.html#__str__', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfile.get_anomaly_idx': ('mplots.html#get_anomaly_idx', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfile.get_motif_idx': ('mplots.html#get_motif_idx', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfile.get_ordered_idx': ('mplots.html#get_ordered_idx', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfile.plot': ('mplots.html#plot', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfile.plot_id': ('mplots.html#plot_id', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfile.plot_interactive': ('mplots.html#plot_interactive', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfile.provide_lens': ('mplots.html#provide_lens', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfilePlot': ('mplots.html#matrixprofileplot', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfilePlot.compute': ('mplots.html#compute', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfilePlot.plot': ('mplots.html#plot', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfilePlot.plot_DM': ('mplots.html#plot_dm', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfilePlot.plot_MP': ('mplots.html#plot_mp', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfilePlot.plot_base': ('mplots.html#plot_base', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfilePlot.plot_check_limits': ('mplots.html#plot_check_limits', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfilePlot.plot_column_range': ('mplots.html#plot_column_range', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfilePlot.plot_heatmap': ('mplots.html#plot_heatmap', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfilePlot.plot_row_range': ('mplots.html#plot_row_range', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfilePlotCached': ('mplots.html#matrixprofileplotcached', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfilePlotCached.get_matrix': ('mplots.html#get_matrix', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfilePlotCached.ids_int': ('mplots.html#ids_int', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfilePlotCached.on_xlims_change': ('mplots.html#on_xlims_change', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfilePlotCached.on_ylims_change': ('mplots.html#on_ylims_change', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfilePlotCached.plot_matrix': ('mplots.html#plot_matrix', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfilePlotCached.plot_matrix_interactive': ( 'mplots.html#plot_matrix_interactive',
                                                                                                'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfilePlotCached.redraw_matrix': ('mplots.html#redraw_matrix', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfiles': ('mplots.html#matrixprofiles', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfiles.append': ('mplots.html#append', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfiles.compute': ('mplots.html#compute', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfiles.get_anomaly_idx': ('mplots.html#get_anomaly_idx', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfiles.get_motif_idx': ('mplots.html#get_motif_idx', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfiles.get_ordered_idx': ('mplots.html#get_ordered_idx', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfiles.plot': ('mplots.html#plot', 'dvats/mplots.py'),
                              'dvats.mplots.MatrixProfiles.plot_motif': ('mplots.html#plot_motif', 'dvats/mplots.py'),
                              'dvats.mplots.check_symmetric': ('mplots.html#check_symmetric', 'dvats/mplots.py'),
                              'dvats.mplots.compute': ('mplots.html#compute', 'dvats/mplots.py'),
                              'dvats.mplots.configure_octave': ('mplots.html#configure_octave', 'dvats/mplots.py'),
                              'dvats.mplots.convert_non_finite_to_zero': ('mplots.html#convert_non_finite_to_zero', 'dvats/mplots.py'),
                              'dvats.mplots.df_plot_colored_variables': ('mplots.html#df_plot_colored_variables', 'dvats/mplots.py'),
                              'dvats.mplots.distance_matrix': ('mplots.html#distance_matrix', 'dvats/mplots.py'),
                              'dvats.mplots.downsample': ('mplots.html#downsample', 'dvats/mplots.py'),
                              'dvats.mplots.ensure_valid_limits': ('mplots.html#ensure_valid_limits', 'dvats/mplots.py'),
                              'dvats.mplots.euclidean_distance': ('mplots.html#euclidean_distance', 'dvats/mplots.py'),
                              'dvats.mplots.get_precomputes': ('mplots.html#get_precomputes', 'dvats/mplots.py'),
                              'dvats.mplots.make_symmetric_': ('mplots.html#make_symmetric_', 'dvats/mplots.py'),
                              'dvats.mplots.matrix_profile': ('mplots.html#matrix_profile', 'dvats/mplots.py'),
                              'dvats.mplots.moving_mean': ('mplots.html#moving_mean', 'dvats/mplots.py'),
                              'dvats.mplots.plot_dataFrame': ('mplots.html#plot_dataframe', 'dvats/mplots.py'),
                              'dvats.mplots.plot_dataFrame_compareSubsequences': ( 'mplots.html#plot_dataframe_comparesubsequences',
                                                                                   'dvats/mplots.py'),
                              'dvats.mplots.plot_df_with_intervals_and_colors': ( 'mplots.html#plot_df_with_intervals_and_colors',
                                                                                  'dvats/mplots.py'),
                              'dvats.mplots.plot_motif': ('mplots.html#plot_motif', 'dvats/mplots.py'),
                              'dvats.mplots.plot_motif_separated': ('mplots.html#plot_motif_separated', 'dvats/mplots.py'),
                              'dvats.mplots.plot_subsequence': ('mplots.html#plot_subsequence', 'dvats/mplots.py'),
                              'dvats.mplots.plot_subsequences': ('mplots.html#plot_subsequences', 'dvats/mplots.py'),
                              'dvats.mplots.plot_subsequences_aux': ('mplots.html#plot_subsequences_aux', 'dvats/mplots.py'),
                              'dvats.mplots.plot_subsequences_configure_legend': ( 'mplots.html#plot_subsequences_configure_legend',
                                                                                   'dvats/mplots.py'),
                              'dvats.mplots.plot_subsequences_full_series': ( 'mplots.html#plot_subsequences_full_series',
                                                                              'dvats/mplots.py'),
                              'dvats.mplots.plot_subsequences_generate_title': ( 'mplots.html#plot_subsequences_generate_title',
                                                                                 'dvats/mplots.py'),
                              'dvats.mplots.plot_subsequences_prepare_parameters': ( 'mplots.html#plot_subsequences_prepare_parameters',
                                                                                     'dvats/mplots.py'),
                              'dvats.mplots.plot_subsequences_subsequences': ( 'mplots.html#plot_subsequences_subsequences',
                                                                               'dvats/mplots.py'),
                              'dvats.mplots.restore_index': ('mplots.html#restore_index', 'dvats/mplots.py'),
                              'dvats.mplots.show_subsequence': ('mplots.html#show_subsequence', 'dvats/mplots.py'),
                              'dvats.mplots.sum_of_squared_differences': ('mplots.html#sum_of_squared_differences', 'dvats/mplots.py'),
                              'dvats.mplots.threshold_interval': ('mplots.html#threshold_interval', 'dvats/mplots.py'),
                              'dvats.mplots.z_normalize': ('mplots.html#z_normalize', 'dvats/mplots.py'),
                              'dvats.mplots.z_normalized_euclidean_distance': ( 'mplots.html#z_normalized_euclidean_distance',
                                                                                'dvats/mplots.py'),
                              'dvats.mplots.zoom_index': ('mplots.html#zoom_index', 'dvats/mplots.py')},
            'dvats.utils': { 'dvats.utils.DivisorsError': ('utils.html#divisorserror', 'dvats/utils.py'),
                             'dvats.utils.DivisorsError.__init__': ('utils.html#__init__', 'dvats/utils.py'),
                             'dvats.utils.DownsampleError': ('utils.html#downsampleerror', 'dvats/utils.py'),
                             'dvats.utils.DownsampleError.__init__': ('utils.html#__init__', 'dvats/utils.py'),
                             'dvats.utils.Interpolator': ('utils.html#interpolator', 'dvats/utils.py'),
                             'dvats.utils.Interpolator.fit': ('utils.html#fit', 'dvats/utils.py'),
                             'dvats.utils.Interpolator.transform': ('utils.html#transform', 'dvats/utils.py'),
                             'dvats.utils.Learner.export_and_get': ('utils.html#learner.export_and_get', 'dvats/utils.py'),
                             'dvats.utils.Mssg': ('utils.html#mssg', 'dvats/utils.py'),
                             'dvats.utils.Mssg.__str__': ('utils.html#__str__', 'dvats/utils.py'),
                             'dvats.utils.Mssg.ensure_function': ('utils.html#ensure_function', 'dvats/utils.py'),
                             'dvats.utils.Mssg.final': ('utils.html#final', 'dvats/utils.py'),
                             'dvats.utils.Mssg.final_': ('utils.html#final_', 'dvats/utils.py'),
                             'dvats.utils.Mssg.get': ('utils.html#get', 'dvats/utils.py'),
                             'dvats.utils.Mssg.get_less': ('utils.html#get_less', 'dvats/utils.py'),
                             'dvats.utils.Mssg.initial': ('utils.html#initial', 'dvats/utils.py'),
                             'dvats.utils.Mssg.initial_': ('utils.html#initial_', 'dvats/utils.py'),
                             'dvats.utils.Mssg.print': ('utils.html#print', 'dvats/utils.py'),
                             'dvats.utils.Mssg.print_error': ('utils.html#print_error', 'dvats/utils.py'),
                             'dvats.utils.Mssg.print_less': ('utils.html#print_less', 'dvats/utils.py'),
                             'dvats.utils.Mssg.print_less_': ('utils.html#print_less_', 'dvats/utils.py'),
                             'dvats.utils.Mssg.styled': ('utils.html#styled', 'dvats/utils.py'),
                             'dvats.utils.PAATransformer': ('utils.html#paatransformer', 'dvats/utils.py'),
                             'dvats.utils.PAATransformer.fit': ('utils.html#fit', 'dvats/utils.py'),
                             'dvats.utils.PAATransformer.transform': ('utils.html#transform', 'dvats/utils.py'),
                             'dvats.utils.PrintLayer': ('utils.html#printlayer', 'dvats/utils.py'),
                             'dvats.utils.PrintLayer.__init__': ('utils.html#__init__', 'dvats/utils.py'),
                             'dvats.utils.PrintLayer.forward': ('utils.html#forward', 'dvats/utils.py'),
                             'dvats.utils.ReferenceArtifact': ('utils.html#referenceartifact', 'dvats/utils.py'),
                             'dvats.utils.ReferenceArtifact.__init__': ('utils.html#__init__', 'dvats/utils.py'),
                             'dvats.utils.Time': ('utils.html#time', 'dvats/utils.py'),
                             'dvats.utils.Time.__init__': ('utils.html#__init__', 'dvats/utils.py'),
                             'dvats.utils.Time.__str__': ('utils.html#__str__', 'dvats/utils.py'),
                             'dvats.utils.Time.duration': ('utils.html#duration', 'dvats/utils.py'),
                             'dvats.utils.Time.end': ('utils.html#end', 'dvats/utils.py'),
                             'dvats.utils.Time.show': ('utils.html#show', 'dvats/utils.py'),
                             'dvats.utils.Time.start': ('utils.html#start', 'dvats/utils.py'),
                             'dvats.utils._check_value': ('utils.html#_check_value', 'dvats/utils.py'),
                             'dvats.utils._get_mssg': ('utils.html#_get_mssg', 'dvats/utils.py'),
                             'dvats.utils._validate_nested_list': ('utils.html#_validate_nested_list', 'dvats/utils.py'),
                             'dvats.utils.divisors': ('utils.html#divisors', 'dvats/utils.py'),
                             'dvats.utils.downsample': ('utils.html#downsample', 'dvats/utils.py'),
                             'dvats.utils.downsample_propose_crop_': ('utils.html#downsample_propose_crop_', 'dvats/utils.py'),
                             'dvats.utils.exec_with_and_feather_k_output': ('utils.html#exec_with_and_feather_k_output', 'dvats/utils.py'),
                             'dvats.utils.exec_with_feather': ('utils.html#exec_with_feather', 'dvats/utils.py'),
                             'dvats.utils.exec_with_feather_k_output': ('utils.html#exec_with_feather_k_output', 'dvats/utils.py'),
                             'dvats.utils.find_dominant_window_sizes_list': ( 'utils.html#find_dominant_window_sizes_list',
                                                                              'dvats/utils.py'),
                             'dvats.utils.find_dominant_window_sizes_list_single': ( 'utils.html#find_dominant_window_sizes_list_single',
                                                                                     'dvats/utils.py'),
                             'dvats.utils.find_dominant_window_sizes_list_single_old': ( 'utils.html#find_dominant_window_sizes_list_single_old',
                                                                                         'dvats/utils.py'),
                             'dvats.utils.funcname': ('utils.html#funcname', 'dvats/utils.py'),
                             'dvats.utils.generate_TS_df': ('utils.html#generate_ts_df', 'dvats/utils.py'),
                             'dvats.utils.get_pickle_artifact': ('utils.html#get_pickle_artifact', 'dvats/utils.py'),
                             'dvats.utils.get_wandb_artifacts': ('utils.html#get_wandb_artifacts', 'dvats/utils.py'),
                             'dvats.utils.group_similar_sizes': ('utils.html#group_similar_sizes', 'dvats/utils.py'),
                             'dvats.utils.group_similar_sizes_': ('utils.html#group_similar_sizes_', 'dvats/utils.py'),
                             'dvats.utils.normalize_columns': ('utils.html#normalize_columns', 'dvats/utils.py'),
                             'dvats.utils.plot_with_dots': ('utils.html#plot_with_dots', 'dvats/utils.py'),
                             'dvats.utils.print_flush': ('utils.html#print_flush', 'dvats/utils.py'),
                             'dvats.utils.py_function': ('utils.html#py_function', 'dvats/utils.py'),
                             'dvats.utils.remove_constant_columns': ('utils.html#remove_constant_columns', 'dvats/utils.py'),
                             'dvats.utils.select_separated_sizes': ('utils.html#select_separated_sizes', 'dvats/utils.py'),
                             'dvats.utils.show_sequence': ('utils.html#show_sequence', 'dvats/utils.py'),
                             'dvats.utils.styled_print': ('utils.html#styled_print', 'dvats/utils.py'),
                             'dvats.utils.update_patch': ('utils.html#update_patch', 'dvats/utils.py'),
                             'dvats.utils.wandb.apis.public.Artifact.to_obj': ( 'utils.html#wandb.apis.public.artifact.to_obj',
                                                                                'dvats/utils.py')},
            'dvats.visualization': { 'dvats.visualization.plot_TS': ('visualization.html#plot_ts', 'dvats/visualization.py'),
                                     'dvats.visualization.plot_mask': ('visualization.html#plot_mask', 'dvats/visualization.py'),
                                     'dvats.visualization.plot_validation_ts_ae': ( 'visualization.html#plot_validation_ts_ae',
                                                                                    'dvats/visualization.py')},
            'dvats.xai': { 'dvats.xai.InteractiveAnomalyPlot': ('xai.html#interactiveanomalyplot', 'dvats/xai.py'),
                           'dvats.xai.InteractiveAnomalyPlot.__init__': ('xai.html#__init__', 'dvats/xai.py'),
                           'dvats.xai.InteractiveAnomalyPlot.plot_projections_clusters_interactive': ( 'xai.html#plot_projections_clusters_interactive',
                                                                                                       'dvats/xai.py'),
                           'dvats.xai.anomaly_score': ('xai.html#anomaly_score', 'dvats/xai.py'),
                           'dvats.xai.calculate_cluster_stats': ('xai.html#calculate_cluster_stats', 'dvats/xai.py'),
                           'dvats.xai.detector': ('xai.html#detector', 'dvats/xai.py'),
                           'dvats.xai.get_anomalies': ('xai.html#get_anomalies', 'dvats/xai.py'),
                           'dvats.xai.get_anomaly_styles': ('xai.html#get_anomaly_styles', 'dvats/xai.py'),
                           'dvats.xai.get_dataset': ('xai.html#get_dataset', 'dvats/xai.py'),
                           'dvats.xai.get_df_selected': ('xai.html#get_df_selected', 'dvats/xai.py'),
                           'dvats.xai.get_embeddings': ('xai.html#get_embeddings', 'dvats/xai.py'),
                           'dvats.xai.get_prjs': ('xai.html#get_prjs', 'dvats/xai.py'),
                           'dvats.xai.plot_anomaly_scores_distribution': ('xai.html#plot_anomaly_scores_distribution', 'dvats/xai.py'),
                           'dvats.xai.plot_clusters_with_anomalies': ('xai.html#plot_clusters_with_anomalies', 'dvats/xai.py'),
                           'dvats.xai.plot_clusters_with_anomalies_interactive_plot': ( 'xai.html#plot_clusters_with_anomalies_interactive_plot',
                                                                                        'dvats/xai.py'),
                           'dvats.xai.plot_initial_config': ('xai.html#plot_initial_config', 'dvats/xai.py'),
                           'dvats.xai.plot_projections': ('xai.html#plot_projections', 'dvats/xai.py'),
                           'dvats.xai.plot_projections_clusters': ('xai.html#plot_projections_clusters', 'dvats/xai.py'),
                           'dvats.xai.plot_save': ('xai.html#plot_save', 'dvats/xai.py'),
                           'dvats.xai.shift_datetime': ('xai.html#shift_datetime', 'dvats/xai.py'),
                           'dvats.xai.ts_plot_interactive': ('xai.html#ts_plot_interactive', 'dvats/xai.py'),
                           'dvats.xai.umap_parameters': ('xai.html#umap_parameters', 'dvats/xai.py'),
                           'dvats.xai.update_plot': ('xai.html#update_plot', 'dvats/xai.py')}}}